import { VisualEditing } from "next-sanity";
import { cookies, draftMode } from "next/headers";

import type { Metadata } from "next";

import "./globals.css";
import Header from '@/components/Header'
import Tickets from "@/components/Tickets";
import Connect from "@/components/Connect";
import Footer from "@/components/Footer";
import Popup from "@/components/Popup";
import { client } from "@/sanity/lib/client";
import { POPUPS_QUERY } from "@/sanity/lib/queries";
import { Popup as PopupType, POPUPS_QUERYResult } from "@/sanity.types";


export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  
  const popups = await getPopups();
  
  return (
    <html lang="en" style={{ fontSize: '10px', lineHeight: '1.15' }}>
      <head>
        <link rel="preload" href="https://use.typekit.net/iqh1stq.css" as="style" />
        <link rel="stylesheet" href="https://use.typekit.net/iqh1stq.css" />
      </head>
      <body className="bg-blue text-[1.6rem]">
        {draftMode().isEnabled && (
          <a className="fixed right-0 bottom-0 bg-blue text-white p-4 m-4" href="/api/draft-mode/disable">
            Disable preview mode
          </a>
        )}
        <Header />
        {children}
        {draftMode().isEnabled && <VisualEditing />}
        <Tickets />
        <Connect />
        <Footer />
        {popups.map((popup) => (
          <Popup {...popup} key={popup._id} />
        ))}
      </body>
    </html>
  );
}

async function getPopups(): Promise<POPUPS_QUERYResult> {
  const popups = await client.fetch<POPUPS_QUERYResult>(POPUPS_QUERY);
  const filteredPopups = popups.filter(popup => {
    const now = new Date();
    if (popup.starts) {
      const starts = new Date(popup.starts);
      if (starts > now) return false;
    }
    if (popup.ends) {
      const ends = new Date(popup.ends);
      if (ends <= now) return false;
    }
    return true;
  });

  return filteredPopups;
}